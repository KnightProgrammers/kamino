name: Continuous Integration

on:
  push:
    branches: [ 'main' ]
  pull_request:
    branches: [ 'main' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  checks: write
  statuses: write
  contents: write
  pull-requests: write

env:
  DB_HOST: "127.0.0.1"
  DB_PORT: "3306"
  DB_USER: "root"
  DB_PASSWORD: "root"
  DB_SCHEMA: "kamino-test"

jobs:
  server-unit-tests:
    name: "Server - Unit Tests"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - name: 🍺 Check out repository code
        uses: actions/checkout@v4
      - name: 🔥 Initialize MySQL
        run: sudo systemctl start mysql.service
      - name: 📌 Initialize first database
        run: |
          mysql -e 'CREATE DATABASE `${{ env.DB_SCHEMA }}`;' \
          -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
      - name: 🚀 Boost user
        run: |
          mysql -e "ALTER USER '${{ env.DB_USER }}'@'localhost' \
          IDENTIFIED WITH mysql_native_password BY 'root';" \
          -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
      - name: 🦑 Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: server/node_modules
          key: server-node_modules-${{hashFiles('package-lock.json')}}
          restore-keys: server-node_modules-
      - name: 🧶 Install Dependencies
        run: npm ci
      - name: 📦 run tests
        run: npm run test-ci
      - name: ☂️ Jest Coverage Comment
        uses: MishaKav/jest-coverage-comment@main
        if: always()
        with:
          coverage-summary-path: ./server/coverage/coverage-summary.json
          title: Server Unit Test
          summary-title: Summary
          badge-title: Coverage
          hide-comment: false
          create-new-comment: false
          hide-summary: false
          junitxml-title: Test Report
          junitxml-path: ./server/junit.xml
  pull-docker-images:
    name: "Pull Docker Images"
    needs: server-unit-tests
    strategy:
      matrix:
        include:
          - name: "redis-docker-image"
            image: "redis:latest"
          - name: "mysql-docker-image"
            image: "mysql/mysql-server:5.7"
    runs-on: ubuntu-latest
    steps:
      - name: 🌏 Pull image
        run: |
          docker pull ${{ matrix.image }}
      - name: 🦄 Save image
        run: |
          docker save ${{ matrix.image }} > /tmp/${{ matrix.name }}.tar
      - name: 🪼 Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: /tmp/${{ matrix.name }}.tar
  build-docker-images:
    name: "Build Docker Images"
    strategy:
      matrix:
        app: [ "server", "client" ]
    runs-on: ubuntu-latest
    needs: server-unit-tests
    steps:
      - name: 🍺 Check out repository code
        uses: actions/checkout@v4
      - name: ⚒️ Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: 🐳 Build Docker Image
        uses: docker/build-push-action@v5
        with:
          push: false
          load: true
          tags: kamino-kamino-${{ matrix.app }}:latest
          builder: ${{ steps.buildx.outputs.name }}
          file: ./${{ matrix.app }}/Dockerfile
          context: ./${{ matrix.app }}
          outputs: type=docker,dest=/tmp/${{ matrix.app }}-docker-image.tar
      - name: 🪼 Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.app }}-docker-image
          path: /tmp/${{ matrix.app }}-docker-image.tar
          retention-days: 1
  server-api-tests:
    name: "Server - API Tests"
    runs-on: ubuntu-latest
    needs: [ build-docker-images, pull-docker-images ]
    defaults:
      run:
        shell: bash
        working-directory: tests/api-tests
    steps:
      - name: 🍺 Check out repository code
        uses: actions/checkout@v4
      - name: 🛬 Download Docker Images
        uses: actions/download-artifact@v4
        with:
          path: /tmp
      - name: 🎣 Load Docker Images
        run: |
          docker load --input /tmp/server-docker-image/server-docker-image.tar
          docker load --input /tmp/client-docker-image/client-docker-image.tar
          docker load --input /tmp/redis-docker-image/redis-docker-image.tar
          docker load --input /tmp/mysql-docker-image/mysql-docker-image.tar
          docker image ls -a
      - name: 🚂 Run Dockers
        run: docker compose up --detach --wait --no-build
      - name: 🦑 Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: tests/api-tests/node_modules
          key: api-tests-node_modules-${{hashFiles('package-lock.json')}}
          restore-keys: api-tests-node_modules-
      - name: 🧶 Install Dependencies
        run: npm ci
      - name: 📦 run tests
        run: npm run test
      - name: 🦔 Test Result Comment
        uses: MishaKav/jest-coverage-comment@main
        if: always()
        with:
          title: API Tests
          hide-comment: false
          create-new-comment: false
          hide-summary: false
          junitxml-title: Test Report
          junitxml-path: ./tests/api-tests/reports/test-report.xml
      - name: 🪼 Upload artifact
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: api-test-report.html
          path: ./tests/api-tests/reports/test-report.html
      - name: 🌝 Publish Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: API Test Report
          path: ./tests/api-tests/reports/test-report.xml
          reporter: java-junit
          fail-on-error: false
  client-e2e-tests:
    name: "Client - E2E Tests"
    runs-on: ubuntu-latest
    needs: [ build-docker-images, pull-docker-images ]
    defaults:
      run:
        shell: bash
        working-directory: tests/e2e-tests
    steps:
      - name: 🍺 Check out repository code
        uses: actions/checkout@v4
      - name: 🛬 Download Docker Images
        uses: actions/download-artifact@v4
        with:
          path: /tmp
      - name: 🎣 Load Docker Images
        run: |
          docker load --input /tmp/server-docker-image/server-docker-image.tar
          docker load --input /tmp/client-docker-image/client-docker-image.tar
          docker load --input /tmp/redis-docker-image/redis-docker-image.tar
          docker load --input /tmp/mysql-docker-image/mysql-docker-image.tar
          docker image ls -a
      - name: 🚂 Run Dockers
        run: docker compose up --detach --wait --no-build
      - name: 🦑 Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: tests/e2e-tests/node_modules
          key: e2e-tests-node_modules-${{hashFiles('package-lock.json')}}
          restore-keys: e2e-tests-node_modules-
      - name: 🧶 Install Dependencies
        run: npm ci
      - name: 📦 run tests
        run: npm run test
      - name: 🦔 Test Result Comment
        uses: MishaKav/jest-coverage-comment@main
        if: always()
        with:
          title: E2E Tests
          hide-comment: false
          create-new-comment: false
          hide-summary: false
          junitxml-title: Test Report
          junitxml-path: ./tests/e2e-tests/reports/test-report.xml
      - name: 🪼 Upload artifact
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-report
          path: ./tests/e2e-tests/reports
      - name: 🌝 Publish Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: E2E Test Report
          path: ./tests/e2e-tests/reports/test-report.xml
          reporter: java-junit
          fail-on-error: false
  cleanup:
    runs-on: ubuntu-latest
    name: Remove Artifacts
    needs: [ server-api-tests, client-e2e-tests ]
    if: always()
    steps:
      - name: 🗑️ Delete Artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            server-docker-image
            client-docker-image
            mysql-docker-image
            redis-docker-image
  newrelic-notification:
    runs-on: ubuntu-latest
    name: New Relic Notification
    needs: [ server-api-tests, client-e2e-tests ]
    if: github.event_name == 'push'
    steps:
      - name: ☄️ New Relic Application Deployment Marker
        uses: newrelic/deployment-marker-action@v2.5.0
        with:
          apiKey: ${{ secrets.NEW_RELIC_API_KEY }}
          guid: ${{ secrets.NEW_RELIC_DEPLOYMENT_ENTITY_GUID }}
          version: "${{ github.sha }}"
          user: "${{ github.actor }}"
          description: "${{ github.event.head_commit.message }}"
          deploymentType: "ROLLING"
  db-backup:
    runs-on: ubuntu-latest
    name: Production DB Backup
    needs: [ server-api-tests, client-e2e-tests ]
    if: github.event_name == 'push'
    steps:
      - name: 🍺 Check out repository code
        uses: actions/checkout@v4
      - name: 🦑 Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: 🧶 Install Dependencies
        run: |
          cd backup-script
          npm ci
      - name: 💾 Create Backup
        run: |
          cd backup-script
          npm run backup
        env:
          DB_HOST: ${{ secrets.DB_PROD_HOST }}
          DB_PORT: ${{ secrets.DB_PROD_PORT }}
          DB_USER: ${{ secrets.DB_PROD_USER }}
          DB_PASSWORD: ${{ secrets.DB_PROD_PASSWORD }}
          DB_SCHEMA: ${{ secrets.DB_PROD_SCHEMA }}
          AZURE_ACCOUNT: ${{ secrets.AZURE_ACCOUNT }}
          AZURE_ACCOUNT_KEY: ${{ secrets.AZURE_ACCOUNT_KEY }}
