name: Continuous Integration

on:
  push:
    branches: [ 'main' ]
  pull_request:
    branches: [ 'main' ]

permissions:
  checks: write
  statuses: write
  contents: write
  pull-requests: write

env:
  DB_PORT: "3306"
  DB_USER: "root"
  DB_PASSWORD: "root"
  DB_SCHEMA: "kamino-test"

jobs:
  server-unit-tests:
    name: "Server - Unit Tests"
    runs-on: ubuntu-20.04
    steps:
      - name: üî• Initialize MySQL
        run: sudo systemctl start mysql.service
      - name: üìå Initialize first database
        run: |
          mysql -e 'CREATE DATABASE `${{ env.DB_SCHEMA }}`;' \
          -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
      - name: üöÄ Boost user
        run: |
          mysql -e "ALTER USER '${{ env.DB_USER }}'@'localhost' \
          IDENTIFIED WITH mysql_native_password BY 'root';" \
          -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}

      - name: üç∫ Check out repository code
        uses: actions/checkout@v3

      - name: üß∂ Install Dependencies
        run: |
          cd server 
          npm ci

      - name: üì¶ run tests
        run: |
          cd server 
          npm test
  server-api-tests:
    name: "Server - API Tests"
    runs-on: ubuntu-latest
    needs: server-unit-tests
    steps:
      - name: üç∫ Check out repository code
        uses: actions/checkout@v3
      - name: üöÇ Run Dockers
        run: docker compose up --detach --wait
      - name: ü™¢ Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: ‚õΩÔ∏è Install newman
        run: |
          npm install -g newman
      - name: üõ∞Ô∏è Run POSTMAN collection
        run: >
          newman run "https://api.getpostman.com/collections/${{vars.POSTMAN_COLLECTION_ID}}?apikey=${{ secrets.POSTMAN_APIKEY }}" 
          --environment "https://api.getpostman.com/environments/${{ vars.POSTMAN_ENVIRONMENT_ID }}?apikey=${{ secrets.POSTMAN_APIKEY }}" 
          --reporters cli,json --reporter-json-export test-report.json
      - name: üìù Create Status check based on postman results
        # You may also reference the major or major.minor version
        uses: im-open/process-postman-test-results@v2.1.4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          results-file: test-report.json
          report-name: 'Postman Test Result'                 # Default: Postman Test Results
          create-status-check: true                          # Default: true
          create-pr-comment: true                            # Default: true
          update-comment-if-one-exists: false                 # Default: true
          ignore-test-failures: true                        # Default: false
          timezone: 'america/montevideo'                     # Default: UTC
      - name: ‚ò¢Ô∏è Fail if there were errors in the postman tests
        if: steps.process-postman.outputs.test-outcome == 'Failed'
        run: |
          echo "There were postman failures."
          exit 1
