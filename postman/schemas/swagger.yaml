openapi: 3.0.3
info:
  title: API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://127.0.0.1:8080
    description: Development server
  - url: https://kamino-server-production.up.railway.app
    description: Production server
tags:
  - name: Auth
    description: Administraci贸n de session
  - name: User
    description: Operaciones sobre usuario
paths:
  /api/auth/signup:
    post:
      tags:
        - Auth
      summary: Registraci贸n
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegistration'
        required: true
      responses:
        '201':
          description: Successful operation
          headers:
            "X-Powered-By":
              $ref: '#/components/headers/X-Powered-By'
            "Access-Control-Allow-Origin":
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            "Vary":
              $ref: '#/components/headers/Vary'
            "Access-Control-Allow-Headers":
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            "Content-Type":
              $ref: '#/components/headers/Content-Type'
            "Content-Length":
              $ref: '#/components/headers/Content-Length'
            "ETag":
              $ref: '#/components/headers/ETag'
            "Date":
              $ref: '#/components/headers/Date'
            "Connection":
              $ref: '#/components/headers/Connection'
            "Keep-Alive":
              $ref: '#/components/headers/Keep-Alive'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Usuario existente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: 400
                message: Email is already in use
        '500':
          description: Error en el servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/auth/signin:
    post:
      tags:
        - Auth
      summary: Iniciar Sesion
      operationId: signin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLogin'
        required: true
      responses:
        '201':
          description: Successful operation
          headers:
            "X-Powered-By":
              $ref: '#/components/headers/X-Powered-By'
            "Access-Control-Allow-Origin":
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            "Vary":
              $ref: '#/components/headers/Vary'
            "Access-Control-Allow-Headers":
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            "Content-Type":
              $ref: '#/components/headers/Content-Type'
            "Content-Length":
              $ref: '#/components/headers/Content-Length'
            "ETag":
              $ref: '#/components/headers/ETag'
            "Date":
              $ref: '#/components/headers/Date'
            "Connection":
              $ref: '#/components/headers/Connection'
            "Keep-Alive":
              $ref: '#/components/headers/Keep-Alive'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenWithUser'
        '401':
          description: Credenciales incorrectas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: 401
                message: Bad credentials
        '500':
          description: Error en el servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/auth/refreshtoken:
    post:
      tags:
        - Auth
      summary: Refrescar Sesion
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
        required: true
      responses:
        '200':
          description: Successful operation
          headers:
            "X-Powered-By":
              $ref: '#/components/headers/X-Powered-By'
            "Access-Control-Allow-Origin":
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            "Vary":
              $ref: '#/components/headers/Vary'
            "Access-Control-Allow-Headers":
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            "Content-Type":
              $ref: '#/components/headers/Content-Type'
            "Content-Length":
              $ref: '#/components/headers/Content-Length'
            "ETag":
              $ref: '#/components/headers/ETag'
            "Date":
              $ref: '#/components/headers/Date'
            "Connection":
              $ref: '#/components/headers/Connection'
            "Keep-Alive":
              $ref: '#/components/headers/Keep-Alive'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '400':
          description: No Access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: 400
                message: '"Refresh Token" is required'
        '403':
          description: Access Token expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: 403
                message: Refresh token expired
        '500':
          description: Error en el servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/users/me:
    get:
      tags:
        - User
      summary: Informaci贸n sobre el usuario
      operationId: userMe
      responses:
        '200':
          description: Operaci贸n exitosa
          headers:
            "X-Powered-By":
              $ref: '#/components/headers/X-Powered-By'
            "Access-Control-Allow-Origin":
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            "Vary":
              $ref: '#/components/headers/Vary'
            "Access-Control-Allow-Headers":
              $ref: '#/components/headers/Access-Control-Allow-Headers'
            "Content-Type":
              $ref: '#/components/headers/Content-Type'
            "Content-Length":
              $ref: '#/components/headers/Content-Length'
            "ETag":
              $ref: '#/components/headers/ETag'
            "Date":
              $ref: '#/components/headers/Date'
            "Connection":
              $ref: '#/components/headers/Connection'
            "Keep-Alive":
              $ref: '#/components/headers/Keep-Alive'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Error en el servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - ApiKeyAuth: [ ]
components:
  headers:
    "X-Powered-By":
      schema:
        type: string
        example: Express
    "Access-Control-Allow-Origin":
      schema:
        type: string
        example: http://localhost:3000
    "Vary":
      schema:
        type: string
        example: Origin
    "Access-Control-Allow-Headers":
      schema:
        type: string
        example: x-access-token, Origin, Content-Type, Accept
    "Content-Type":
      schema:
        type: string
        example: application/json; charset=utf-8
    "Content-Length":
      schema:
        type: integer
        example: 357
    "ETag":
      schema:
        type: string
        example: W/"165-zwLRqk48bVz+07Mlyljc2NESVoo"
    "Date":
      schema:
        type: string
        example: Wed, 16 Aug 2023 04:48:11 GMT
    "Connection":
      schema:
        type: string
        example: keep-alive
    "Keep-Alive":
      schema:
        type: string
        example: timeout=5
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 5d2265a5-f073-451c-9fae-601e4b4d73d8
        name:
          type: string
          example: Anakin Skywalker
        email:
          type: string
          example: anakin@empire.com
    AuthLogin:
      type: object
      properties:
        email:
          type: string
          example: anakin@empire.com
        password:
          type: string
          example: HighGround
    AuthRegistration:
      type: object
      properties:
        name:
          type: string
          example: Anakin Skywalker
        email:
          type: string
          example: anakin@empire.com
        password:
          type: string
          example: HighGround
    AuthToken:
      type: object
      properties:
        accessToken:
          type: string
          example: <JWT_Token>
        refreshToken:
          type: string
          example: <Refresh_Token>
    AuthTokenWithUser:
      type: object
      properties:
        id:
          type: string
          example: 5d2265a5-f073-451c-9fae-601e4b4d73d8
        name:
          type: string
          example: Anakin Skywalker
        email:
          type: string
          example: anakin@empire.com
        accessToken:
          type: string
          example: <JWT_Token>
        refreshToken:
          type: string
          example: <Refresh_Token>
    RefreshToken:
      type: object
      properties:
        refreshToken:
          type: string
          example: 2c86c5a2-0aaf-4ae9-b538-496f9ec2c32b
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 500
        message:
          type: string
          example: Server Error
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: x-access-token
      in: header
